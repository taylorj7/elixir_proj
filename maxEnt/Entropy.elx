defmodule Entropy do
    def count_unique_words(s)  do
        (String.split(s)
            |> Enum.reduce([[],0],
                fn (elem,[a1,a2]) ->
                    if Enum.any?(a1, fn(e) -> e == elem end) do
                        [a1,a2]
                    else
                        [a1 ++ [elem], a2 + 1]
                    end
                end))
    end
    def count_appearances(s,k) do
        (String.split(s)
            |> Enum.reduce(0,
                fn (elem,a2) ->
                    if elem == k do
                        a2 + 1
                    else
                        a2
                    end
                end))
    end
    def words(s) do
        (String.split(s)
            |> Enum.reduce(0,
                fn (_,a2) ->
                    a2 + 1
                end))
    end
    # Crap
    def weight(s,k) do
        count_appearances(s,k)/words(s)
    end
    # Crap
    def weight_by_class(c,k) do
        Enum.reduce(c, 0,
            fn(str, v) -> weight(str, k) + v end)/length(c)
    end
    # Crap
    def overall_weights(classes, k) do
        classes
            |> Enum.map(fn(class) -> weight_by_class(class, k) end)
    end
    def add(ls, []) do
        ls
    end
    def add([], ls) do
        ls
    end
    def add([h|t], [h2|t2]) do
        [h+h2|add(t,t2)]
    end
    def combine_many(results) do
        results
            |> Enum.map(fn(result) ->
                    Enum.map(result, fn(val) -> 
                        val/length(results) end) end)
            |> Enum.reduce([],
                fn(temp,params)->add(temp,params) end)
    end
    def classify(doc, classes, lambdas, features) do
        c = calc_constant(doc,classes,lambdas,features)
        i = for j <- 1..length(classes), do: j
        classInd = List.zip([classes, i])
        {_, class} = classInd
                    |> ParallelEnum.preduce(fn({class, k}) ->
                                             {:math.pow(2.71828, feature_calc(doc,class,lambdas,features))/c, k} 
                                                end,
                                            fn({val,class},{maxval,maxclass}) ->
                                                if val > maxval do
                                                    {val, class}
                                                else
                                                    {maxval, maxclass}
                                                end
                                                end,
                                            {-10,0})
        class
    end
    def calc_constant(doc, classes, lambdas, features) do
        classes
            |> ParallelEnum.preduce(fn(class) -> :math.pow(2.71828,feature_calc(doc,class,lambdas,features)) end, 
                                    fn(x,a) -> x + a end, 
                                    0)
    end
    def feature_calc(doc,class,lambdas,features) do
        func = (fn({lambda,feat}, accum) -> (lambda*feat.(doc,class) + accum) end)
        List.zip([lambdas,features])
            |> Enum.reduce(0, func)
    end
    
    def calculate_deltas(docs, classes, lambdas, features) do
        constant = (Enum.reduce(classes, 0, fn(class,accum) -> 
                accum + Enum.reduce(docs, 0, fn(doc,ac) ->
                    ac + Enum.reduce(features, 0, fn(f, acc) ->
                        acc + f.(doc, class) end) end) end))
        features
            |> Enum.map(fn(feature) ->
                v1 = List.zip([docs, classes])
                        |> Enum.reduce(0, fn({d,c},a) -> a + feature.(d,c)end)
                v2 = Enum.reduce(docs, 0, fn(doc, acc) ->
                    lambdaFeature = List.zip([lambdas, features])
                    temp = Enum.reduce(classes, 0 ,fn(class, a) -> a + :math.pow(2.71828, Enum.reduce(lambdaFeature, 0, fn({lam, f}) -> lam*(f.(doc, class)) end)) end)
                    temp2 = Enum.reduce(classes, 0, 
                        fn(class, a) -> ((:math.pow(2.71828, Enum.reduce(lambdaFeature, 0, 
                            fn({lam, f}) -> lam*(f.(doc, class)) 
                            end))*feature.(doc,class))/temp) + a 
                        end)
                    acc + temp2 end)
                Utility.natLog(v1/v2)/constant end)
    end
    def train(docs, classes, lambdas, features) do
        deltas = [0.01,0.01]#calculate_deltas(docs, classes, lambdas, features)
        err = Enum.reduce(deltas, 0, (fn(x,a) -> a + (x*x) end))
        if (err > 0.01) do
            train(docs, classes, add(lambdas, deltas), features)
        else
            add(lambdas, deltas)
        end
    end
end

defmodule Utility do
    def natLog(x) do
        :math.log10(x)/:math.log10(2.719)
    end
end
defmodule ParallelEnum do
    def pmap(collection, fun) do
        me = self
        collection
            |> Enum.map(fn (elem) ->
                spawn_link fn -> (send me, { self, fun.(elem) }) end end) 
            |> Enum.map(fn (pid) ->
                receive do { ^pid, result } -> result end
                end)
    end
    def preduce(collection, fun, join, start) do
        me = self
        collection
            |> Enum.map(fn (elem) ->
                spawn_link fn -> (send me, { self, fun.(elem) }) end end) 
            |> Enum.map(fn (pid) ->
                receive do { ^pid, result } -> result end
                end)
            |> Enum.reduce(start, fn(val, a) ->
                join.(val, a)
                end)
    end
end